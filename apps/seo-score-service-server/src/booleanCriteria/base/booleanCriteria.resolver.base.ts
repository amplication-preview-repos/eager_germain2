/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BooleanCriteria } from "./BooleanCriteria";
import { BooleanCriteriaCountArgs } from "./BooleanCriteriaCountArgs";
import { BooleanCriteriaFindManyArgs } from "./BooleanCriteriaFindManyArgs";
import { BooleanCriteriaFindUniqueArgs } from "./BooleanCriteriaFindUniqueArgs";
import { CreateBooleanCriteriaArgs } from "./CreateBooleanCriteriaArgs";
import { UpdateBooleanCriteriaArgs } from "./UpdateBooleanCriteriaArgs";
import { DeleteBooleanCriteriaArgs } from "./DeleteBooleanCriteriaArgs";
import { UrlAnalysis } from "../../urlAnalysis/base/UrlAnalysis";
import { BooleanCriteriaService } from "../booleanCriteria.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BooleanCriteria)
export class BooleanCriteriaResolverBase {
  constructor(
    protected readonly service: BooleanCriteriaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "read",
    possession: "any",
  })
  async _booleanCriteriaItemsMeta(
    @graphql.Args() args: BooleanCriteriaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BooleanCriteria])
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "read",
    possession: "any",
  })
  async booleanCriteriaItems(
    @graphql.Args() args: BooleanCriteriaFindManyArgs
  ): Promise<BooleanCriteria[]> {
    return this.service.booleanCriteriaItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BooleanCriteria, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "read",
    possession: "own",
  })
  async booleanCriteria(
    @graphql.Args() args: BooleanCriteriaFindUniqueArgs
  ): Promise<BooleanCriteria | null> {
    const result = await this.service.booleanCriteria(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BooleanCriteria)
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "create",
    possession: "any",
  })
  async createBooleanCriteria(
    @graphql.Args() args: CreateBooleanCriteriaArgs
  ): Promise<BooleanCriteria> {
    return await this.service.createBooleanCriteria({
      ...args,
      data: {
        ...args.data,

        urlAnalysis: args.data.urlAnalysis
          ? {
              connect: args.data.urlAnalysis,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BooleanCriteria)
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "update",
    possession: "any",
  })
  async updateBooleanCriteria(
    @graphql.Args() args: UpdateBooleanCriteriaArgs
  ): Promise<BooleanCriteria | null> {
    try {
      return await this.service.updateBooleanCriteria({
        ...args,
        data: {
          ...args.data,

          urlAnalysis: args.data.urlAnalysis
            ? {
                connect: args.data.urlAnalysis,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BooleanCriteria)
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "delete",
    possession: "any",
  })
  async deleteBooleanCriteria(
    @graphql.Args() args: DeleteBooleanCriteriaArgs
  ): Promise<BooleanCriteria | null> {
    try {
      return await this.service.deleteBooleanCriteria(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UrlAnalysis, {
    nullable: true,
    name: "urlAnalysis",
  })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "any",
  })
  async getUrlAnalysis(
    @graphql.Parent() parent: BooleanCriteria
  ): Promise<UrlAnalysis | null> {
    const result = await this.service.getUrlAnalysis(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
