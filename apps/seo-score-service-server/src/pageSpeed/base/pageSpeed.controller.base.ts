/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PageSpeedService } from "../pageSpeed.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PageSpeedCreateInput } from "./PageSpeedCreateInput";
import { PageSpeed } from "./PageSpeed";
import { PageSpeedFindManyArgs } from "./PageSpeedFindManyArgs";
import { PageSpeedWhereUniqueInput } from "./PageSpeedWhereUniqueInput";
import { PageSpeedUpdateInput } from "./PageSpeedUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PageSpeedControllerBase {
  constructor(
    protected readonly service: PageSpeedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PageSpeed })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPageSpeed(
    @common.Body() data: PageSpeedCreateInput
  ): Promise<PageSpeed> {
    return await this.service.createPageSpeed({
      data: {
        ...data,

        urlAnalysis: data.urlAnalysis
          ? {
              connect: data.urlAnalysis,
            }
          : undefined,
      },
      select: {
        accessibility: true,
        bestPractices: true,
        cls: true,
        createdAt: true,
        fcp: true,
        id: true,
        lcp: true,
        performance: true,
        seo: true,
        strategy: true,
        tbt: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PageSpeed] })
  @ApiNestedQuery(PageSpeedFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pageSpeeds(@common.Req() request: Request): Promise<PageSpeed[]> {
    const args = plainToClass(PageSpeedFindManyArgs, request.query);
    return this.service.pageSpeeds({
      ...args,
      select: {
        accessibility: true,
        bestPractices: true,
        cls: true,
        createdAt: true,
        fcp: true,
        id: true,
        lcp: true,
        performance: true,
        seo: true,
        strategy: true,
        tbt: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PageSpeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pageSpeed(
    @common.Param() params: PageSpeedWhereUniqueInput
  ): Promise<PageSpeed | null> {
    const result = await this.service.pageSpeed({
      where: params,
      select: {
        accessibility: true,
        bestPractices: true,
        cls: true,
        createdAt: true,
        fcp: true,
        id: true,
        lcp: true,
        performance: true,
        seo: true,
        strategy: true,
        tbt: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PageSpeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePageSpeed(
    @common.Param() params: PageSpeedWhereUniqueInput,
    @common.Body() data: PageSpeedUpdateInput
  ): Promise<PageSpeed | null> {
    try {
      return await this.service.updatePageSpeed({
        where: params,
        data: {
          ...data,

          urlAnalysis: data.urlAnalysis
            ? {
                connect: data.urlAnalysis,
              }
            : undefined,
        },
        select: {
          accessibility: true,
          bestPractices: true,
          cls: true,
          createdAt: true,
          fcp: true,
          id: true,
          lcp: true,
          performance: true,
          seo: true,
          strategy: true,
          tbt: true,
          updatedAt: true,

          urlAnalysis: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PageSpeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePageSpeed(
    @common.Param() params: PageSpeedWhereUniqueInput
  ): Promise<PageSpeed | null> {
    try {
      return await this.service.deletePageSpeed({
        where: params,
        select: {
          accessibility: true,
          bestPractices: true,
          cls: true,
          createdAt: true,
          fcp: true,
          id: true,
          lcp: true,
          performance: true,
          seo: true,
          strategy: true,
          tbt: true,
          updatedAt: true,

          urlAnalysis: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
