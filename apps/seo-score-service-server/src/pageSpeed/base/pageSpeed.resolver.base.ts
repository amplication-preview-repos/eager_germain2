/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PageSpeed } from "./PageSpeed";
import { PageSpeedCountArgs } from "./PageSpeedCountArgs";
import { PageSpeedFindManyArgs } from "./PageSpeedFindManyArgs";
import { PageSpeedFindUniqueArgs } from "./PageSpeedFindUniqueArgs";
import { CreatePageSpeedArgs } from "./CreatePageSpeedArgs";
import { UpdatePageSpeedArgs } from "./UpdatePageSpeedArgs";
import { DeletePageSpeedArgs } from "./DeletePageSpeedArgs";
import { UrlAnalysis } from "../../urlAnalysis/base/UrlAnalysis";
import { PageSpeedService } from "../pageSpeed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PageSpeed)
export class PageSpeedResolverBase {
  constructor(
    protected readonly service: PageSpeedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "any",
  })
  async _pageSpeedsMeta(
    @graphql.Args() args: PageSpeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PageSpeed])
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "any",
  })
  async pageSpeeds(
    @graphql.Args() args: PageSpeedFindManyArgs
  ): Promise<PageSpeed[]> {
    return this.service.pageSpeeds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PageSpeed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "own",
  })
  async pageSpeed(
    @graphql.Args() args: PageSpeedFindUniqueArgs
  ): Promise<PageSpeed | null> {
    const result = await this.service.pageSpeed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PageSpeed)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "create",
    possession: "any",
  })
  async createPageSpeed(
    @graphql.Args() args: CreatePageSpeedArgs
  ): Promise<PageSpeed> {
    return await this.service.createPageSpeed({
      ...args,
      data: {
        ...args.data,

        urlAnalysis: args.data.urlAnalysis
          ? {
              connect: args.data.urlAnalysis,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PageSpeed)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "update",
    possession: "any",
  })
  async updatePageSpeed(
    @graphql.Args() args: UpdatePageSpeedArgs
  ): Promise<PageSpeed | null> {
    try {
      return await this.service.updatePageSpeed({
        ...args,
        data: {
          ...args.data,

          urlAnalysis: args.data.urlAnalysis
            ? {
                connect: args.data.urlAnalysis,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PageSpeed)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "delete",
    possession: "any",
  })
  async deletePageSpeed(
    @graphql.Args() args: DeletePageSpeedArgs
  ): Promise<PageSpeed | null> {
    try {
      return await this.service.deletePageSpeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UrlAnalysis, {
    nullable: true,
    name: "urlAnalysis",
  })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "any",
  })
  async getUrlAnalysis(
    @graphql.Parent() parent: PageSpeed
  ): Promise<UrlAnalysis | null> {
    const result = await this.service.getUrlAnalysis(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
