/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SeoTask } from "./SeoTask";
import { SeoTaskCountArgs } from "./SeoTaskCountArgs";
import { SeoTaskFindManyArgs } from "./SeoTaskFindManyArgs";
import { SeoTaskFindUniqueArgs } from "./SeoTaskFindUniqueArgs";
import { CreateSeoTaskArgs } from "./CreateSeoTaskArgs";
import { UpdateSeoTaskArgs } from "./UpdateSeoTaskArgs";
import { DeleteSeoTaskArgs } from "./DeleteSeoTaskArgs";
import { SeoTaskService } from "../seoTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SeoTask)
export class SeoTaskResolverBase {
  constructor(
    protected readonly service: SeoTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "read",
    possession: "any",
  })
  async _seoTasksMeta(
    @graphql.Args() args: SeoTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SeoTask])
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "read",
    possession: "any",
  })
  async seoTasks(
    @graphql.Args() args: SeoTaskFindManyArgs
  ): Promise<SeoTask[]> {
    return this.service.seoTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SeoTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "read",
    possession: "own",
  })
  async seoTask(
    @graphql.Args() args: SeoTaskFindUniqueArgs
  ): Promise<SeoTask | null> {
    const result = await this.service.seoTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeoTask)
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "create",
    possession: "any",
  })
  async createSeoTask(
    @graphql.Args() args: CreateSeoTaskArgs
  ): Promise<SeoTask> {
    return await this.service.createSeoTask({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeoTask)
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "update",
    possession: "any",
  })
  async updateSeoTask(
    @graphql.Args() args: UpdateSeoTaskArgs
  ): Promise<SeoTask | null> {
    try {
      return await this.service.updateSeoTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SeoTask)
  @nestAccessControl.UseRoles({
    resource: "SeoTask",
    action: "delete",
    possession: "any",
  })
  async deleteSeoTask(
    @graphql.Args() args: DeleteSeoTaskArgs
  ): Promise<SeoTask | null> {
    try {
      return await this.service.deleteSeoTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
