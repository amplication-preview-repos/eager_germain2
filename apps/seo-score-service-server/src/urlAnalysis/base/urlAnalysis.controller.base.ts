/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UrlAnalysisService } from "../urlAnalysis.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UrlAnalysisCreateInput } from "./UrlAnalysisCreateInput";
import { UrlAnalysis } from "./UrlAnalysis";
import { UrlAnalysisFindManyArgs } from "./UrlAnalysisFindManyArgs";
import { UrlAnalysisWhereUniqueInput } from "./UrlAnalysisWhereUniqueInput";
import { UrlAnalysisUpdateInput } from "./UrlAnalysisUpdateInput";
import { BacklinksFindManyArgs } from "../../backlinks/base/BacklinksFindManyArgs";
import { Backlinks } from "../../backlinks/base/Backlinks";
import { BacklinksWhereUniqueInput } from "../../backlinks/base/BacklinksWhereUniqueInput";
import { BooleanCriteriaFindManyArgs } from "../../booleanCriteria/base/BooleanCriteriaFindManyArgs";
import { BooleanCriteria } from "../../booleanCriteria/base/BooleanCriteria";
import { BooleanCriteriaWhereUniqueInput } from "../../booleanCriteria/base/BooleanCriteriaWhereUniqueInput";
import { ComparativeCriteriaFindManyArgs } from "../../comparativeCriteria/base/ComparativeCriteriaFindManyArgs";
import { ComparativeCriteria } from "../../comparativeCriteria/base/ComparativeCriteria";
import { ComparativeCriteriaWhereUniqueInput } from "../../comparativeCriteria/base/ComparativeCriteriaWhereUniqueInput";
import { PageSpeedFindManyArgs } from "../../pageSpeed/base/PageSpeedFindManyArgs";
import { PageSpeed } from "../../pageSpeed/base/PageSpeed";
import { PageSpeedWhereUniqueInput } from "../../pageSpeed/base/PageSpeedWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UrlAnalysisControllerBase {
  constructor(
    protected readonly service: UrlAnalysisService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UrlAnalysis })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUrlAnalysis(
    @common.Body() data: UrlAnalysisCreateInput
  ): Promise<UrlAnalysis> {
    return await this.service.createUrlAnalysis({
      data: data,
      select: {
        booleanScore: true,
        comparativeScore: true,
        contentSize: true,
        createdAt: true,
        googlePosition: true,
        id: true,
        isTarget: true,
        seoScore: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UrlAnalysis] })
  @ApiNestedQuery(UrlAnalysisFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async urlAnalyses(@common.Req() request: Request): Promise<UrlAnalysis[]> {
    const args = plainToClass(UrlAnalysisFindManyArgs, request.query);
    return this.service.urlAnalyses({
      ...args,
      select: {
        booleanScore: true,
        comparativeScore: true,
        contentSize: true,
        createdAt: true,
        googlePosition: true,
        id: true,
        isTarget: true,
        seoScore: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UrlAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async urlAnalysis(
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<UrlAnalysis | null> {
    const result = await this.service.urlAnalysis({
      where: params,
      select: {
        booleanScore: true,
        comparativeScore: true,
        contentSize: true,
        createdAt: true,
        googlePosition: true,
        id: true,
        isTarget: true,
        seoScore: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UrlAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUrlAnalysis(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() data: UrlAnalysisUpdateInput
  ): Promise<UrlAnalysis | null> {
    try {
      return await this.service.updateUrlAnalysis({
        where: params,
        data: data,
        select: {
          booleanScore: true,
          comparativeScore: true,
          contentSize: true,
          createdAt: true,
          googlePosition: true,
          id: true,
          isTarget: true,
          seoScore: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UrlAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUrlAnalysis(
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<UrlAnalysis | null> {
    try {
      return await this.service.deleteUrlAnalysis({
        where: params,
        select: {
          booleanScore: true,
          comparativeScore: true,
          contentSize: true,
          createdAt: true,
          googlePosition: true,
          id: true,
          isTarget: true,
          seoScore: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/backlinksItems")
  @ApiNestedQuery(BacklinksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Backlinks",
    action: "read",
    possession: "any",
  })
  async findBacklinksItems(
    @common.Req() request: Request,
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<Backlinks[]> {
    const query = plainToClass(BacklinksFindManyArgs, request.query);
    const results = await this.service.findBacklinksItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        domains: true,
        id: true,
        score: true,
        total: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/backlinksItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async connectBacklinksItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BacklinksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backlinksItems: {
        connect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/backlinksItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async updateBacklinksItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BacklinksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backlinksItems: {
        set: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/backlinksItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async disconnectBacklinksItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BacklinksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backlinksItems: {
        disconnect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/booleanCriteriaItems")
  @ApiNestedQuery(BooleanCriteriaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "read",
    possession: "any",
  })
  async findBooleanCriteriaItems(
    @common.Req() request: Request,
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<BooleanCriteria[]> {
    const query = plainToClass(BooleanCriteriaFindManyArgs, request.query);
    const results = await this.service.findBooleanCriteriaItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        keywordInTitle: true,
        titleLength: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/booleanCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async connectBooleanCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BooleanCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booleanCriteriaItems: {
        connect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/booleanCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async updateBooleanCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BooleanCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booleanCriteriaItems: {
        set: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/booleanCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async disconnectBooleanCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: BooleanCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booleanCriteriaItems: {
        disconnect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comparativeCriteriaItems")
  @ApiNestedQuery(ComparativeCriteriaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComparativeCriteria",
    action: "read",
    possession: "any",
  })
  async findComparativeCriteriaItems(
    @common.Req() request: Request,
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<ComparativeCriteria[]> {
    const query = plainToClass(ComparativeCriteriaFindManyArgs, request.query);
    const results = await this.service.findComparativeCriteriaItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        criterionName: true,
        id: true,
        rank: true,
        score: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comparativeCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async connectComparativeCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: ComparativeCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comparativeCriteriaItems: {
        connect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comparativeCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async updateComparativeCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: ComparativeCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comparativeCriteriaItems: {
        set: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comparativeCriteriaItems")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async disconnectComparativeCriteriaItems(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: ComparativeCriteriaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comparativeCriteriaItems: {
        disconnect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pageSpeeds")
  @ApiNestedQuery(PageSpeedFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "any",
  })
  async findPageSpeeds(
    @common.Req() request: Request,
    @common.Param() params: UrlAnalysisWhereUniqueInput
  ): Promise<PageSpeed[]> {
    const query = plainToClass(PageSpeedFindManyArgs, request.query);
    const results = await this.service.findPageSpeeds(params.id, {
      ...query,
      select: {
        accessibility: true,
        bestPractices: true,
        cls: true,
        createdAt: true,
        fcp: true,
        id: true,
        lcp: true,
        performance: true,
        seo: true,
        strategy: true,
        tbt: true,
        updatedAt: true,

        urlAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pageSpeeds")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async connectPageSpeeds(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: PageSpeedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageSpeeds: {
        connect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pageSpeeds")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async updatePageSpeeds(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: PageSpeedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageSpeeds: {
        set: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pageSpeeds")
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async disconnectPageSpeeds(
    @common.Param() params: UrlAnalysisWhereUniqueInput,
    @common.Body() body: PageSpeedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageSpeeds: {
        disconnect: body,
      },
    };
    await this.service.updateUrlAnalysis({
      where: params,
      data,
      select: { id: true },
    });
  }
}
