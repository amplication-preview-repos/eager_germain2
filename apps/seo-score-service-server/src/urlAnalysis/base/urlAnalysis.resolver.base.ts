/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UrlAnalysis } from "./UrlAnalysis";
import { UrlAnalysisCountArgs } from "./UrlAnalysisCountArgs";
import { UrlAnalysisFindManyArgs } from "./UrlAnalysisFindManyArgs";
import { UrlAnalysisFindUniqueArgs } from "./UrlAnalysisFindUniqueArgs";
import { CreateUrlAnalysisArgs } from "./CreateUrlAnalysisArgs";
import { UpdateUrlAnalysisArgs } from "./UpdateUrlAnalysisArgs";
import { DeleteUrlAnalysisArgs } from "./DeleteUrlAnalysisArgs";
import { BacklinksFindManyArgs } from "../../backlinks/base/BacklinksFindManyArgs";
import { Backlinks } from "../../backlinks/base/Backlinks";
import { BooleanCriteriaFindManyArgs } from "../../booleanCriteria/base/BooleanCriteriaFindManyArgs";
import { BooleanCriteria } from "../../booleanCriteria/base/BooleanCriteria";
import { ComparativeCriteriaFindManyArgs } from "../../comparativeCriteria/base/ComparativeCriteriaFindManyArgs";
import { ComparativeCriteria } from "../../comparativeCriteria/base/ComparativeCriteria";
import { PageSpeedFindManyArgs } from "../../pageSpeed/base/PageSpeedFindManyArgs";
import { PageSpeed } from "../../pageSpeed/base/PageSpeed";
import { UrlAnalysisService } from "../urlAnalysis.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UrlAnalysis)
export class UrlAnalysisResolverBase {
  constructor(
    protected readonly service: UrlAnalysisService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "any",
  })
  async _urlAnalysesMeta(
    @graphql.Args() args: UrlAnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UrlAnalysis])
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "any",
  })
  async urlAnalyses(
    @graphql.Args() args: UrlAnalysisFindManyArgs
  ): Promise<UrlAnalysis[]> {
    return this.service.urlAnalyses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UrlAnalysis, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "read",
    possession: "own",
  })
  async urlAnalysis(
    @graphql.Args() args: UrlAnalysisFindUniqueArgs
  ): Promise<UrlAnalysis | null> {
    const result = await this.service.urlAnalysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UrlAnalysis)
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "create",
    possession: "any",
  })
  async createUrlAnalysis(
    @graphql.Args() args: CreateUrlAnalysisArgs
  ): Promise<UrlAnalysis> {
    return await this.service.createUrlAnalysis({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UrlAnalysis)
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "update",
    possession: "any",
  })
  async updateUrlAnalysis(
    @graphql.Args() args: UpdateUrlAnalysisArgs
  ): Promise<UrlAnalysis | null> {
    try {
      return await this.service.updateUrlAnalysis({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UrlAnalysis)
  @nestAccessControl.UseRoles({
    resource: "UrlAnalysis",
    action: "delete",
    possession: "any",
  })
  async deleteUrlAnalysis(
    @graphql.Args() args: DeleteUrlAnalysisArgs
  ): Promise<UrlAnalysis | null> {
    try {
      return await this.service.deleteUrlAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Backlinks], { name: "backlinksItems" })
  @nestAccessControl.UseRoles({
    resource: "Backlinks",
    action: "read",
    possession: "any",
  })
  async findBacklinksItems(
    @graphql.Parent() parent: UrlAnalysis,
    @graphql.Args() args: BacklinksFindManyArgs
  ): Promise<Backlinks[]> {
    const results = await this.service.findBacklinksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BooleanCriteria], {
    name: "booleanCriteriaItems",
  })
  @nestAccessControl.UseRoles({
    resource: "BooleanCriteria",
    action: "read",
    possession: "any",
  })
  async findBooleanCriteriaItems(
    @graphql.Parent() parent: UrlAnalysis,
    @graphql.Args() args: BooleanCriteriaFindManyArgs
  ): Promise<BooleanCriteria[]> {
    const results = await this.service.findBooleanCriteriaItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComparativeCriteria], {
    name: "comparativeCriteriaItems",
  })
  @nestAccessControl.UseRoles({
    resource: "ComparativeCriteria",
    action: "read",
    possession: "any",
  })
  async findComparativeCriteriaItems(
    @graphql.Parent() parent: UrlAnalysis,
    @graphql.Args() args: ComparativeCriteriaFindManyArgs
  ): Promise<ComparativeCriteria[]> {
    const results = await this.service.findComparativeCriteriaItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PageSpeed], { name: "pageSpeeds" })
  @nestAccessControl.UseRoles({
    resource: "PageSpeed",
    action: "read",
    possession: "any",
  })
  async findPageSpeeds(
    @graphql.Parent() parent: UrlAnalysis,
    @graphql.Args() args: PageSpeedFindManyArgs
  ): Promise<PageSpeed[]> {
    const results = await this.service.findPageSpeeds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
